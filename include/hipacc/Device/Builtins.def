//
// Copyright (c) 2012, University of Erlangen-Nuremberg
// Copyright (c) 2012, Siemens AG
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

//===--- Builtins.def - Builtin function info database ----------*- C++ -*-===//
//
// This file defines the standard builtin function database. Users of this file
// must define the BUILTIN macro to make use of this information.
//
//===----------------------------------------------------------------------===//

// The first value provided to the macro specifies the function name of the
// builtin, and results in a hipacc::Builtin::HIPACCBIXX enum value for XX.

// The second value provided to the macro specifies the type of the function
// (result value, then each argument) as follows:
//  v -> void
//  b -> boolean
//  c -> char
//  s -> short
//  i -> int
//  f -> float
//  d -> double
//  z -> size_t
//  V -> Vector, followed by the number of elements and the base type.
//  E -> ext_vector, followed by the number of elements and the base type.
//  . -> "...".  This may only occur at the end of the function list.
//
// Types may be prefixed with the following modifiers:
//  L   -> long (e.g. Li for 'long int')
//  LL  -> long long
//  LLL -> __int128_t (e.g. LLLi)
//  W   -> int64_t
//  S   -> signed
//  U   -> unsigned
//
// Types may be postfixed with the following modifiers:
// * -> pointer (optionally followed by an address space number)
// & -> reference (optionally followed by an address space number)
// C -> const
// D -> volatile

// Builtin HIPACC math functions in alphabetical order from the OpenCL 1.2 Spec:
// http://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/mathFunctions.html
// Corresponding CUDA Math API:
// http://docs.nvidia.com/cuda/cuda-math-api/index.html
// Corresponding Renderscript math functions:
// http://developer.android.com/reference/renderscript/rs__cl_8rsh.html
HIPACCBUILTIN(acos,                 "dd",       HIPACCBIacos,       HIPACCBIacos,       HIPACCBIacos)
HIPACCBUILTIN(acosf,                "ff",       HIPACCBIacosf,      OPENCLBIacosf,      RSBIacosf)
OPENCLBUILTIN(acos,                 "ff",       acosf)
RSBUILTIN(acos,                     "ff",       acosf)

HIPACCBUILTIN(acosh,                "dd",       HIPACCBIacosh,      HIPACCBIacosh,      HIPACCBIacosh)
HIPACCBUILTIN(acoshf,               "ff",       HIPACCBIacoshf,     OPENCLBIacoshf,     RSBIacoshf)
OPENCLBUILTIN(acosh,                "ff",       acoshf)
RSBUILTIN(acosh,                    "ff",       acoshf)

//HIPACCBUILTIN(acospi,               "ff",       HIPACCBI,           HIPACCBI,           HIPACCBI)

HIPACCBUILTIN(asin,                 "dd",       HIPACCBIasin,       HIPACCBIasin,       HIPACCBIasin)
HIPACCBUILTIN(asinf,                "ff",       HIPACCBIasinf,      OPENCLBIasinf,      RSBIasinf)
OPENCLBUILTIN(asin,                 "ff",       asinf)
RSBUILTIN(asin,                     "ff",       asinf)

HIPACCBUILTIN(asinh,                "dd",       HIPACCBIasinh,      HIPACCBIasinh,      HIPACCBIasinh)
HIPACCBUILTIN(asinhf,               "ff",       HIPACCBIasinhf,     OPENCLBIasinhf,     RSBIasinhf)
OPENCLBUILTIN(asinh,                "ff",       asinhf)
RSBUILTIN(asinh,                    "ff",       asinhf)

//HIPACCBUILTIN(asinpi,               "ff",       HIPACCBI,           HIPACCBI,           HIPACCBI)

HIPACCBUILTIN(atan,                 "dd",       HIPACCBIatan,       HIPACCBIatan,       HIPACCBIatan)
HIPACCBUILTIN(atanf,                "ff",       HIPACCBIatanf,      OPENCLBIatanf,      RSBIatanf)
OPENCLBUILTIN(atan,                 "ff",       atanf)
RSBUILTIN(atan,                     "ff",       atanf)

HIPACCBUILTIN(atan2,                "ddd",      HIPACCBIatan2,      HIPACCBIatan2,      HIPACCBIatan2)
HIPACCBUILTIN(atan2f,               "fff",      HIPACCBIatan2f,     OPENCLBIatan2f,     RSBIatan2f)
OPENCLBUILTIN(atan2,                "fff",      atan2f)
RSBUILTIN(atan2,                    "fff",      atan2f)

HIPACCBUILTIN(atanh,                "dd",       HIPACCBIatanh,      HIPACCBIatanh,      HIPACCBIatanh)
HIPACCBUILTIN(atanhf,               "ff",       HIPACCBIatanhf,     OPENCLBIatanhf,     RSBIatanhf)
OPENCLBUILTIN(atanh,                "ff",       atanhf)
RSBUILTIN(atanh,                    "ff",       atanhf)

//HIPACCBUILTIN(atanpi,               "ff",       HIPACCBI,           HIPACCBI,           HIPACCBI)
//HIPACCBUILTIN(atan2pi,              "ff",       HIPACCBI,           HIPACCBI,           HIPACCBI)

HIPACCBUILTIN(cbrt,                 "dd",       HIPACCBIcbrt,       HIPACCBIcbrt,       HIPACCBIcbrt)
HIPACCBUILTIN(cbrtf,                "ff",       HIPACCBIcbrtf,      OPENCLBIcbrtf,      RSBIcbrtf)
OPENCLBUILTIN(cbrt,                 "ff",       cbrtf)
RSBUILTIN(cbrt,                     "ff",       cbrtf)

HIPACCBUILTIN(ceil,                 "dd",       HIPACCBIceil,       HIPACCBIceil,       HIPACCBIceil)
HIPACCBUILTIN(ceilf,                "ff",       HIPACCBIceilf,      OPENCLBIceilf,      RSBIceilf)
OPENCLBUILTIN(ceil,                 "ff",       ceilf)
RSBUILTIN(ceil,                     "ff",       ceilf)

HIPACCBUILTIN(copysign,             "ddd",      HIPACCBIcopysign,   HIPACCBIcopysign,   HIPACCBIcopysign)
HIPACCBUILTIN(copysignf,            "fff",      HIPACCBIcopysignf,  OPENCLBIcopysignf,  RSBIcopysignf)
OPENCLBUILTIN(copysign,             "fff",      copysignf)
RSBUILTIN(copysign,                 "fff",      copysignf)

HIPACCBUILTIN(cos,                  "dd",       HIPACCBIcos,        HIPACCBIcos,        HIPACCBIcos)
HIPACCBUILTIN(cosf,                 "ff",       HIPACCBIcosf,       OPENCLBIcosf,       RSBIcosf)
OPENCLBUILTIN(cos,                  "ff",       cosf)
RSBUILTIN(cos,                      "ff",       cosf)

HIPACCBUILTIN(cosh,                 "dd",       HIPACCBIcosh,       HIPACCBIcosh,       HIPACCBIcosh)
HIPACCBUILTIN(coshf,                "ff",       HIPACCBIcoshf,      OPENCLBIcoshf,      RSBIcoshf)
OPENCLBUILTIN(cosh,                 "ff",       coshf)
RSBUILTIN(cosh,                     "ff",       coshf)

//HIPACCBUILTIN(cospi,                "ff",       HIPACCBI,           HIPACCBI,           HIPACCBI)

HIPACCBUILTIN(erfc,                 "dd",       HIPACCBIerfc,       HIPACCBIerfc,       HIPACCBIerfc)
HIPACCBUILTIN(erfcf,                "ff",       HIPACCBIerfcf,      OPENCLBIerfcf,      RSBIerfcf)
OPENCLBUILTIN(erfc,                 "ff",       erfcf)
RSBUILTIN(erfc,                     "ff",       erfcf)

HIPACCBUILTIN(erf,                  "dd",       HIPACCBIerf,        HIPACCBIerf,        HIPACCBIerf)
HIPACCBUILTIN(erff,                 "ff",       HIPACCBIerff,       OPENCLBIerff,       RSBIerff)
OPENCLBUILTIN(erf,                  "ff",       erff)
RSBUILTIN(erf,                      "ff",       erff)

// CUDA only
//HIPACCBUILTIN(erfcinv,              "ff",       HIPACCBI,           FirstBuiltin,       FirstBuiltin)
//HIPACCBUILTIN(erfcx,                "ff",       HIPACCBI,           FirstBuiltin,       FirstBuiltin)
//HIPACCBUILTIN(erfinv,               "ff",       HIPACCBI,           FirstBuiltin,       FirstBuiltin)

HIPACCBUILTIN(exp,                  "dd",       HIPACCBIexp,        HIPACCBIexp,        HIPACCBIexp)
HIPACCBUILTIN(expf,                 "ff",       HIPACCBIexpf,       OPENCLBIexpf,       RSBIexpf)
OPENCLBUILTIN(exp,                  "ff",       expf)
RSBUILTIN(exp,                      "ff",       expf)

HIPACCBUILTIN(exp2,                 "dd",       HIPACCBIexp2,       HIPACCBIexp2,       HIPACCBIexp2)
HIPACCBUILTIN(exp2f,                "ff",       HIPACCBIexp2f,      OPENCLBIexp2f,      RSBIexp2f)
OPENCLBUILTIN(exp2,                 "ff",       exp2f)
RSBUILTIN(exp2,                     "ff",       exp2f)

HIPACCBUILTIN(exp10,                "dd",       HIPACCBIexp10,      HIPACCBIexp10,      HIPACCBIexp10)
HIPACCBUILTIN(exp10f,               "ff",       HIPACCBIexp10f,     OPENCLBIexp10f,     RSBIexp10f)
OPENCLBUILTIN(exp10,                "ff",       exp10f)
RSBUILTIN(exp10,                    "ff",       exp10f)

HIPACCBUILTIN(expm1,                "dd",       HIPACCBIexpm1,      HIPACCBIexpm1,      HIPACCBIexpm1)
HIPACCBUILTIN(expm1f,               "ff",       HIPACCBIexpm1f,     OPENCLBIexpm1f,     RSBIexpm1f)
OPENCLBUILTIN(expm1,                "ff",       expm1f)
RSBUILTIN(expm1,                    "ff",       expm1f)

HIPACCBUILTIN(fabs,                 "dd",       HIPACCBIfabs,       HIPACCBIfabs,       HIPACCBIfabs)
HIPACCBUILTIN(fabsf,                "ff",       HIPACCBIfabs,       OPENCLBIfabsf,      RSBIfabsf)
OPENCLBUILTIN(fabs,                 "ff",       fabsf)
RSBUILTIN(fabs,                     "ff",       fabsf)

HIPACCBUILTIN(fdim,                 "ddd",      HIPACCBIfdim,       HIPACCBIfdim,       HIPACCBIfdim)
HIPACCBUILTIN(fdimf,                "fff",      HIPACCBIfdimf,      OPENCLBIfdimf,      RSBIfdimf)
OPENCLBUILTIN(fdim,                 "fff",      fdimf)
RSBUILTIN(fdim,                     "fff",      fdimf)

// CUDA only
//HIPACCBUILTIN(fdivide,              "fff",      HIPACCBI,           FirstBuiltin,       FirstBuiltin)

HIPACCBUILTIN(floor,                "dd",       HIPACCBIfloor,      HIPACCBIfloor,      HIPACCBIfloor)
HIPACCBUILTIN(floorf,               "ff",       HIPACCBIfloorf,     OPENCLBIfloorf,     RSBIfloorf)
OPENCLBUILTIN(floor,                "ff",       floorf)
RSBUILTIN(floor,                    "ff",       floorf)

HIPACCBUILTIN(fma,                  "dddd",     HIPACCBIfma,        HIPACCBIfma,        HIPACCBIfma)
HIPACCBUILTIN(fmaf,                 "ffff",     HIPACCBIfma,        OPENCLBIfmaf,       RSBIfmaf)
OPENCLBUILTIN(fma,                  "ffff",     fmaf)
RSBUILTIN(fma,                      "ffff",     fmaf)

HIPACCBUILTIN(fmax,                 "ddd",      HIPACCBIfmax,       HIPACCBIfmax,       HIPACCBIfmax)
HIPACCBUILTIN(fmaxf,                "fff",      HIPACCBIfmaxf,      OPENCLBIfmaxf,      RSBIfmaxf)
OPENCLBUILTIN(fmax,                 "fff",      fmaxf)
RSBUILTIN(fmax,                     "fff",      fmaxf)

HIPACCBUILTIN(fmin,                 "ddd",      HIPACCBIfmin,       HIPACCBIfmin,       HIPACCBIfmin)
HIPACCBUILTIN(fminf,                "fff",      HIPACCBIfminf,      OPENCLBIfminf,      RSBIfminf)
OPENCLBUILTIN(fmin,                 "fff",      fminf)
RSBUILTIN(fmin,                     "fff",      fminf)

HIPACCBUILTIN(fmod,                 "ddd",      HIPACCBIfmod,       HIPACCBIfmod,       HIPACCBIfmod)
HIPACCBUILTIN(fmodf,                "fff",      HIPACCBIfmodf,      OPENCLBIfmodf,      RSBIfmodf)
OPENCLBUILTIN(fmod,                 "fff",      fmodf)
RSBUILTIN(fmod,                     "fff",      fmodf)

HIPACCBUILTIN(fract,                "dd",       HIPACCBIfract,      HIPACCBIfract,      HIPACCBIfract)
HIPACCBUILTIN(fractf,               "ff",       HIPACCBIfractf,     OPENCLBIfractf,     RSBIfractf)
OPENCLBUILTIN(fract,                "ff",       fractf)
RSBUILTIN(fract,                    "ff",       fractf)

HIPACCBUILTIN(frexp,                "ddi*",     HIPACCBIfrexp,      HIPACCBIfrexp,      HIPACCBIfrexp)
HIPACCBUILTIN(frexpf,               "ffi*",     HIPACCBIfrexpf,     OPENCLBIfrexpf,     RSBIfrexpf)
OPENCLBUILTIN(frexp,                "ffi*",     frexpf)
RSBUILTIN(frexp,                    "ffi*",     frexpf)

HIPACCBUILTIN(hypot,                "ddd",      HIPACCBIhypot,      HIPACCBIhypot,      HIPACCBIhypot)
HIPACCBUILTIN(hypotf,               "fff",      HIPACCBIhypotf,     OPENCLBIhypotf,     RSBIhypotf)
OPENCLBUILTIN(hypot,                "fff",      hypotf)
RSBUILTIN(hypot,                    "fff",      hypotf)

HIPACCBUILTIN(ilogb,                "id",       HIPACCBIilogb,      HIPACCBIilogb,      HIPACCBIilogb)
HIPACCBUILTIN(ilogbf,               "if",       HIPACCBIilogbf,     OPENCLBIilogbf,     RSBIilogbf)
OPENCLBUILTIN(ilogb,                "if",       ilogbf)
RSBUILTIN(ilogb,                    "if",       ilogbf)

// CUDA only
HIPACCBUILTIN(isfinite,             "bf",       HIPACCBIisfinite,   FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(isinf,                "bf",       HIPACCBIisinf,      FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(isnan,                "bf",       HIPACCBIisnan,      FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(j0,                   "id",       HIPACCBIj0,         FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(j0f,                  "if",       HIPACCBIj0f,        FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(j1,                   "id",       HIPACCBIj1,         FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(j1f,                  "if",       HIPACCBIj1f,        FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(jn,                   "id",       HIPACCBIjn,         FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(jnf,                  "if",       HIPACCBIjnf,        FirstBuiltin,       FirstBuiltin)

HIPACCBUILTIN(ldexp,                "ddi",      HIPACCBIldexp,      HIPACCBIldexp,      HIPACCBIldexp)
HIPACCBUILTIN(ldexpf,               "ffi",      HIPACCBIldexpf,     OPENCLBIldexpf,     RSBIldexpf)
OPENCLBUILTIN(ldexp,                "ffi",      ldexpf)
RSBUILTIN(ldexp,                    "ffi",      ldexpf)

HIPACCBUILTIN(lgamma,               "dd",       HIPACCBIlgamma,     HIPACCBIlgamma,     HIPACCBIlgamma)
HIPACCBUILTIN(lgammaf,              "ff",       HIPACCBIlgammaf,    OPENCLBIlgammaf,    RSBIlgammaf)
OPENCLBUILTIN(lgamma,               "ff",       lgammaf)
RSBUILTIN(lgamma,                   "ff",       lgammaf)

HIPACCBUILTIN(lgamma_r,             "ddi*",     FirstBuiltin,       HIPACCBIlgamma_r,   RSBIlgamma_r)
HIPACCBUILTIN(lgamma_rf,            "ffi*",     FirstBuiltin,       OPENCLBIlgamma_rf,  RSBIlgamma_rf)
OPENCLBUILTIN(lgamma_r,             "ffi*",     lgamma_rf)
RSBUILTIN(lgamma,                   "ffi*",     lgamma_r)
RSBUILTIN(lgamma,                   "ffi*",     lgamma_rf)

HIPACCBUILTIN(log,                  "dd",       HIPACCBIlog,        HIPACCBIlog,        HIPACCBIlog)
HIPACCBUILTIN(logf,                 "ff",       HIPACCBIlogf,       OPENCLBIlogf,       RSBIlogf)
OPENCLBUILTIN(log,                  "ff",       logf)
RSBUILTIN(log,                      "ff",       logf)

HIPACCBUILTIN(log2,                 "dd",       HIPACCBIlog2,       HIPACCBIlog2,       HIPACCBIlog2)
HIPACCBUILTIN(log2f,                "ff",       HIPACCBIlog2f,      OPENCLBIlog2f,      RSBIlog2f)
OPENCLBUILTIN(log2,                 "ff",       log2f)
RSBUILTIN(log2,                     "ff",       log2f)

HIPACCBUILTIN(log10,                "dd",       HIPACCBIlog10,      HIPACCBIlog10,      HIPACCBIlog10)
HIPACCBUILTIN(log10f,               "ff",       HIPACCBIlog10f,     OPENCLBIlog10f,     RSBIlog10f)
OPENCLBUILTIN(log10,                "ff",       log10f)
RSBUILTIN(log10,                    "ff",       log10f)

HIPACCBUILTIN(log1p,                "dd",       HIPACCBIlog1p,      HIPACCBIlog1p,      HIPACCBIlog1p)
HIPACCBUILTIN(log1pf,               "ff",       HIPACCBIlog1pf,     OPENCLBIlog1pf,     RSBIlog1pf)
OPENCLBUILTIN(log1p,                "ff",       log1pf)
RSBUILTIN(log1p,                    "ff",       log1pf)

HIPACCBUILTIN(logb,                 "dd",       HIPACCBIlogb,       HIPACCBIlogb,       HIPACCBIlogb)
HIPACCBUILTIN(logbf,                "ff",       HIPACCBIlogbf,      OPENCLBIlogbf,      RSBIlogbf)
OPENCLBUILTIN(logb,                 "ff",       logbf)
RSBUILTIN(logb,                     "ff",       logbf)

// OpenCL
//HIPACCBUILTIN(mad,                  "ff",       FirstBuiltin,       HIPACCBI,           HIPACCBI)
//HIPACCBUILTIN(maxmag,               "ff",       FirstBuiltin,       HIPACCBI,           FirstBuiltin)
//HIPACCBUILTIN(minmag,               "ff",       FirstBuiltin,       HIPACCBI,           FirstBuiltin)

HIPACCBUILTIN(modf,                 "ddd*",     HIPACCBImodf,       HIPACCBImodf,       HIPACCBImodf)
HIPACCBUILTIN(modff,                "fff*",     HIPACCBImodff,      OPENCLBImodff,      RSBImodff)
OPENCLBUILTIN(modf,                 "fff*",     modff)
RSBUILTIN(modf,                     "fff*",     modff)

HIPACCBUILTIN(nan,                  "dc*C",     HIPACCBInan,        HIPACCBInan,        FirstBuiltin)
HIPACCBUILTIN(nanf,                 "fc*C",     HIPACCBInanf,       OPENCLBInanf,       FirstBuiltin)
OPENCLBUILTIN(nan,                  "fc*C",     nanf)

HIPACCBUILTIN(nearbyint,            "dd",       HIPACCBInearbyint,  FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(nearbyintf,           "ff",       HIPACCBInearbyintf, FirstBuiltin,       FirstBuiltin)

HIPACCBUILTIN(nextafter,            "ddd",      HIPACCBInextafter,  HIPACCBInextafter,  HIPACCBInextafter)
HIPACCBUILTIN(nextafterf,           "fff",      HIPACCBInextafterf, OPENCLBInextafterf, RSBInextafterf)
OPENCLBUILTIN(nextafter,            "fff",      nextafterf)
RSBUILTIN(nextafter,                "fff",      nextafterf)

// CUDA
//HIPACCBUILTIN(normcdff,           "ff",       HIPACCBI,           FirstBuiltin,         FirstBuiltin)
//HIPACCBUILTIN(normcdf,            "dd",       HIPACCBI,           FirstBuiltin,         FirstBuiltin)
//HIPACCBUILTIN(normcdfinvf,        "ff",       HIPACCBI,           FirstBuiltin,         FirstBuiltin)
//HIPACCBUILTIN(normcdfinv,         "dd",       HIPACCBI,           FirstBuiltin,         FirstBuiltin)

HIPACCBUILTIN(pow,                  "ddd",      HIPACCBIpow,        HIPACCBIpow,        HIPACCBIpow)
HIPACCBUILTIN(powf,                 "fff",      HIPACCBIpowf,       OPENCLBIpowf,       RSBIpowf)
OPENCLBUILTIN(pow,                  "fff",      powf)
RSBUILTIN(pow,                      "fff",      powf)

HIPACCBUILTIN(pown,                 "ddi",      HIPACCBIpown,       HIPACCBIpown,       HIPACCBIpown)
HIPACCBUILTIN(pownf,                "ffi",      HIPACCBIpownf,      OPENCLBIpownf,      RSBIpownf)
OPENCLBUILTIN(pown,                 "ffi",      pownf)
RSBUILTIN(pown,                     "ffi",      pownf)

HIPACCBUILTIN(powr,                 "ddd",      HIPACCBIpowr,       HIPACCBIpowr,       HIPACCBIpowr)
HIPACCBUILTIN(powrf,                "fff",      HIPACCBIpowrf,      OPENCLBIpowrf,      RSBIpowrf)
OPENCLBUILTIN(powr,                 "fff",      powrf)
RSBUILTIN(powr,                     "fff",      powrf)

// CUDA
//HIPACCBUILTIN(rcbrt,              "dd",         HIPACCBI,           FirstBuiltin,       FirstBuiltin)
//HIPACCBUILTIN(rcbrtf,             "ff",         HIPACCBI,           FirstBuiltin,       FirstBuiltin)

HIPACCBUILTIN(remainder,            "ddd",      HIPACCBIremainder,  HIPACCBIremainder,  HIPACCBIremainder)
HIPACCBUILTIN(remainderf,           "fff",      HIPACCBIremainderf, OPENCLBIremainderf, RSBIremainderf)
OPENCLBUILTIN(remainder,            "fff",      remainderf)
RSBUILTIN(remainder,                "fff",      remainderf)

HIPACCBUILTIN(remquo,               "dddi*",    HIPACCBIremquo,     HIPACCBIremquo,     FirstBuiltin)
HIPACCBUILTIN(remquof,              "fffi*",    HIPACCBIremquof,    OPENCLBIremquof,    FirstBuiltin)
OPENCLBUILTIN(remquo,               "fffi*",    remquof)

HIPACCBUILTIN(rint,                 "dd",       HIPACCBIrint,       HIPACCBIrint,       HIPACCBIrint)
HIPACCBUILTIN(rintf,                "ff",       HIPACCBIrintf,      OPENCLBIrintf,      RSBIrintf)
OPENCLBUILTIN(rint,                 "ff",       rintf)
RSBUILTIN(rint,                     "ff",       rintf)

HIPACCBUILTIN(lrint,                "Lid",      HIPACCBIlrint,      FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(lrintf,               "Lif",      HIPACCBIlrintf,     FirstBuiltin,       FirstBuiltin)

HIPACCBUILTIN(lround,               "Lid",      HIPACCBIlround,     FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(lroundf,              "Lif",      HIPACCBIlroundf,    FirstBuiltin,       FirstBuiltin)

// OpenCL only
//HIPACCBUILTIN(rootn,                "ddi",      FirstBuiltin,      HIPACCBI,            HIPACCBI)
//HIPACCBUILTIN(rootnf,               "ffi",      FirstBuiltin,      HIPACCBI,            HIPACCBI)

HIPACCBUILTIN(round,                "dd",       HIPACCBIround,      HIPACCBIround,      HIPACCBIround)
HIPACCBUILTIN(roundf,               "ff",       HIPACCBIroundf,     OPENCLBIroundf,     RSBIroundf)
OPENCLBUILTIN(round,                "ff",       roundf)
RSBUILTIN(round,                    "ff",       roundf)

HIPACCBUILTIN(rsqrt,                "dd",       HIPACCBIrsqrt,      HIPACCBIrsqrt,      HIPACCBIrsqrt)
HIPACCBUILTIN(rsqrtf,               "ff",       HIPACCBIrsqrtf,     OPENCLBIrsqrtf,     RSBIrsqrtf)
OPENCLBUILTIN(rsqrt,                "ff",       rsqrtf)
RSBUILTIN(rsqrt,                    "ff",       rsqrtf)

// CUDA
HIPACCBUILTIN(scalbln,              "ddLi",     HIPACCBIscalbln,    FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(scalblnf,             "ffLi",     HIPACCBIscalblnf,   FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(scalbn,               "ddi",      HIPACCBIscalbln,    FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(scalbnf,              "ffi",      HIPACCBIscalblnf,   FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(signbit,              "bf",       HIPACCBIsignbit,    FirstBuiltin,       FirstBuiltin)

HIPACCBUILTIN(sin,                  "dd",       HIPACCBIsin,        HIPACCBIsin,        HIPACCBIsin)
HIPACCBUILTIN(sinf,                 "ff",       HIPACCBIsinf,       OPENCLBIsinf,       RSBIsinf)
OPENCLBUILTIN(sin,                  "ff",       sinf)
RSBUILTIN(sin,                      "ff",       sinf)

HIPACCBUILTIN(sincos,               "vddd",     HIPACCBIsincos,     HIPACCBIsincos,     HIPACCBIsincos)
HIPACCBUILTIN(sincosf,              "vfff",     HIPACCBIsincosf,    OPENCLBIsincosf,    RSBIsincosf)
OPENCLBUILTIN(sincos,               "vfff",     sincosf)
RSBUILTIN(sincos,                   "vfff",     sincosf)

// CUDA only
//HIPACCBUILTIN(sincospif,            "vff*f*",   HIPACCBI,           HIPACCBI,           FirstBuiltin)

HIPACCBUILTIN(sinh,                 "dd",       HIPACCBIsinh,       HIPACCBIsinh,       HIPACCBIsinh)
HIPACCBUILTIN(sinhf,                "ff",       HIPACCBIsinhf,      OPENCLBIsinhf,      RSBIsinhf)
OPENCLBUILTIN(sinh,                 "ff",       sinhf)
RSBUILTIN(sinh,                     "ff",       sinhf)

//HIPACCBUILTIN(sinpi,                "ff",       HIPACCBI,           HIPACCBI,           HIPACCBI)

HIPACCBUILTIN(sqrt,                 "dd",       HIPACCBIsqrt,       HIPACCBIsqrt,       HIPACCBIsqrt)
HIPACCBUILTIN(sqrtf,                "ff",       HIPACCBIsqrtf,      OPENCLBIsqrtf,      RSBIsqrtf)
OPENCLBUILTIN(sqrt,                 "ff",       sqrtf)
RSBUILTIN(sqrt,                     "ff",       sqrtf)

HIPACCBUILTIN(tan,                  "dd",       HIPACCBItan,        HIPACCBItan,        HIPACCBItan)
HIPACCBUILTIN(tanf,                 "ff",       HIPACCBItanf,       OPENCLBItanf,       RSBItanf)
OPENCLBUILTIN(tan,                  "ff",       tanf)
RSBUILTIN(tan,                      "ff",       tanf)

HIPACCBUILTIN(tanh,                 "dd",       HIPACCBItanh,       HIPACCBItanh,       HIPACCBItanh)
HIPACCBUILTIN(tanhf,                "ff",       HIPACCBItanhf,      OPENCLBItanhf,      RSBItanhf)
OPENCLBUILTIN(tanh,                 "ff",       tanhf)
RSBUILTIN(tanh,                     "ff",       tanhf)

//HIPACCBUILTIN(tanpi,                "ff",       HIPACCBI,           HIPACCBI,           HIPACCBI)

HIPACCBUILTIN(tgamma,               "dd",       HIPACCBItgamma,     HIPACCBItgamma,     HIPACCBItgamma)
HIPACCBUILTIN(tgammaf,              "ff",       HIPACCBItgammaf,    OPENCLBItgammaf,    RSBItgammaf)
OPENCLBUILTIN(tgamma,               "ff",       tgammaf)
RSBUILTIN(tgamma,                   "ff",       tgammaf)

HIPACCBUILTIN(trunc,                "dd",       HIPACCBItrunc,      HIPACCBItrunc,      HIPACCBItrunc)
HIPACCBUILTIN(truncf,               "ff",       HIPACCBItruncf,     OPENCLBItruncf,     RSBItruncf)
OPENCLBUILTIN(trunc,                "ff",       truncf)
RSBUILTIN(trunc,                    "ff",       truncf)

// CUDA
HIPACCBUILTIN(y0,                   "dd",       HIPACCBIy0,         FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(y0f,                  "ff",       HIPACCBIy0f,        FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(y1,                   "dd",       HIPACCBIy1,         FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(y1f,                  "ff",       HIPACCBIy1f,        FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(yn,                   "dd",       HIPACCBIyn,         FirstBuiltin,       FirstBuiltin)
HIPACCBUILTIN(ynf,                  "ff",       HIPACCBIynf,        FirstBuiltin,       FirstBuiltin)

// other function - not from math.h
HIPACCBUILTIN(abs,                  "ii",       HIPACCBIabs,        HIPACCBIabs,        HIPACCBIabs)
HIPACCBUILTIN(labs,                 "LiLi",     HIPACCBIlabs,       OPENCLBIlabs,       RSBIlabs)
OPENCLBUILTIN(abs,                  "LiLi",     labs)
RSBUILTIN(abs,                      "LiLi",     labs)

// Builtin OpenCL functions
// OpenCL work-item built-in functions
// http://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/workItemFunctions.html
OPENCLBUILTIN(get_work_dim,         "Ui",           get_work_dim)
OPENCLBUILTIN(get_global_size,      "zUi",          get_global_size)
OPENCLBUILTIN(get_global_id,        "zUi",          get_global_id)
OPENCLBUILTIN(get_local_size,       "zUi",          get_local_size)
OPENCLBUILTIN(get_local_id,         "zUi",          get_local_id)
OPENCLBUILTIN(get_num_groups,       "zUi",          get_num_groups)
OPENCLBUILTIN(get_group_id,         "zUi",          get_group_id)
OPENCLBUILTIN(get_global_offset,    "zUi",          get_global_offset)
// http://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/barrier.html
OPENCLBUILTIN(barrier,              "zUi",          barrier)
// http://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/imageFunctions.html
OPENCLBUILTIN(read_imagef,          "E4fv*UiE2i",   read_imagef)
OPENCLBUILTIN(read_imagei,          "E4iv*UiE2i",   read_imagei)
OPENCLBUILTIN(read_imageui,         "E4Uiv*UiE2i",  read_imageui)
OPENCLBUILTIN(write_imagef,         "vv*E2iE4f",    write_imagef)
OPENCLBUILTIN(write_imagei,         "vv*E2iE4i",    write_imagei)
OPENCLBUILTIN(write_imageui,        "vv*E2iE4Ui",   write_imageui)
OPENCLBUILTIN(getWindowAt,          "UiC*CUiUi",    getWindowAt)



// Builtin CUDA functions
// We fake the texture functions, e.g. instead of using
// template<class T, int texType, enum cudaTextureReadMode mode> struct texture
// T tex1Dfetch(texture<T, cudaTextureType1D, cudaReadModeElementType> t, int x)
// T tex2D(texture<T, cudaTextureType2D, cudaReadModeElementType> t, int x, int y)
// template<class T> void surf2Dwrite(T val, surface<void, cudaSurfaceType2D> surf, int x, int y)
// Use the following definitions:
// T tex1Dfetch(T *tex, int x)
// T tex2D(T *tex, int x, int y)
// surf2Dwrite(T val, T *surf, int x, int y)
// This is possible since we use textures only for pretty-printing at the
// moment.
CUDABUILTIN(tex1Dfetch,             "ScSc*i",       tex1DfetchSc)
CUDABUILTIN(tex1Dfetch,             "UcUc*i",       tex1DfetchUc)
CUDABUILTIN(tex1Dfetch,             "ss*i",         tex1Dfetchs)
CUDABUILTIN(tex1Dfetch,             "UsUs*i",       tex1DfetchUs)
CUDABUILTIN(tex1Dfetch,             "ii*i",         tex1Dfetchi)
CUDABUILTIN(tex1Dfetch,             "UiUi*i",       tex1DfetchUi)
CUDABUILTIN(tex1Dfetch,             "ff*i",         tex1Dfetchf)
CUDABUILTIN(tex2D,                  "ScSc*ii",      tex2DSc)
CUDABUILTIN(tex2D,                  "UcUc*ii",      tex2DUc)
CUDABUILTIN(tex2D,                  "ss*ii",        tex2Ds)
CUDABUILTIN(tex2D,                  "UsUs*ii",      tex2DUs)
CUDABUILTIN(tex2D,                  "ii*ii",        tex2Di)
CUDABUILTIN(tex2D,                  "UiUi*ii",      tex2DUi)
CUDABUILTIN(tex2D,                  "ff*ii",        tex2Df)
CUDABUILTIN(__ldg,                  "ScScC*i",      __ldgSc)
CUDABUILTIN(__ldg,                  "UcUcC*i",      __ldgUc)
CUDABUILTIN(__ldg,                  "ssC*i",        __ldgs)
CUDABUILTIN(__ldg,                  "UsUsC*i",      __ldgUs)
CUDABUILTIN(__ldg,                  "iiC*i",        __ldgi)
CUDABUILTIN(__ldg,                  "UiUiC*i",      __ldgUi)
CUDABUILTIN(__ldg,                  "ffC*i",        __ldgf)
CUDABUILTIN(surf2Dwrite,            "vScSc*ii",     surf2DwriteSc)
CUDABUILTIN(surf2Dwrite,            "vUcUc*ii",     surf2DwriteUc)
CUDABUILTIN(surf2Dwrite,            "vss*ii",       surf2Dwrites)
CUDABUILTIN(surf2Dwrite,            "vUsUs*ii",     surf2DwriteUs)
CUDABUILTIN(surf2Dwrite,            "vii*ii",       surf2Dwritei)
CUDABUILTIN(surf2Dwrite,            "vUiUi*ii",     surf2DwriteUi)
CUDABUILTIN(surf2Dwrite,            "vff*ii",       surf2Dwritef)
CUDABUILTIN(tex1Dfetch,             "E4ScE4Sc*i",   tex1DfetchE4Sc)
CUDABUILTIN(tex1Dfetch,             "E4UcE4Uc*i",   tex1DfetchE4Uc)
CUDABUILTIN(tex1Dfetch,             "E4sE4s*i",     tex1DfetchE4s)
CUDABUILTIN(tex1Dfetch,             "E4UsE4Us*i",   tex1DfetchE4Us)
CUDABUILTIN(tex1Dfetch,             "E4iE4i*i",     tex1DfetchE4i)
CUDABUILTIN(tex1Dfetch,             "E4UiE4Ui*i",   tex1DfetchE4Ui)
CUDABUILTIN(tex1Dfetch,             "E4fE4f*i",     tex1DfetchE4f)
CUDABUILTIN(tex2D,                  "E4ScE4Sc*ii",  tex2DE4Sc)
CUDABUILTIN(tex2D,                  "E4UcE4Uc*ii",  tex2DE4Uc)
CUDABUILTIN(tex2D,                  "E4sE4s*ii",    tex2DE4s)
CUDABUILTIN(tex2D,                  "E4UsE4Us*ii",  tex2DE4Us)
CUDABUILTIN(tex2D,                  "E4iE4i*ii",    tex2DE4i)
CUDABUILTIN(tex2D,                  "E4UiE4Ui*ii",  tex2DE4Ui)
CUDABUILTIN(tex2D,                  "E4fE4f*ii",    tex2DE4f)
CUDABUILTIN(__ldg,                  "E4ScE4ScC*i",  __ldgE4Sc)
CUDABUILTIN(__ldg,                  "E4UcE4UcC*i",  __ldgE4Uc)
CUDABUILTIN(__ldg,                  "E4sE4sC*i",    __ldgE4s)
CUDABUILTIN(__ldg,                  "E4UsE4UsC*i",  __ldgE4Us)
CUDABUILTIN(__ldg,                  "E4iE4iC*i",    __ldgE4i)
CUDABUILTIN(__ldg,                  "E4UiE4UiC*i",  __ldgE4Ui)
CUDABUILTIN(__ldg,                  "E4fE4fC*i",    __ldgE4f)
CUDABUILTIN(surf2Dwrite,            "vE4ScE4Sc*ii", surf2DwriteE4Sc)
CUDABUILTIN(surf2Dwrite,            "vE4UcE4Uc*ii", surf2DwriteE4Uc)
CUDABUILTIN(surf2Dwrite,            "vE4sE4s*ii",   surf2DwriteE4s)
CUDABUILTIN(surf2Dwrite,            "vE4UsE4Us*ii", surf2DwriteE4Us)
CUDABUILTIN(surf2Dwrite,            "vE4iE4i*ii",   surf2DwriteE4i)
CUDABUILTIN(surf2Dwrite,            "vE4UiE4Ui*ii", surf2DwriteE4Ui)
CUDABUILTIN(surf2Dwrite,            "vE4fE4f*ii",   surf2DwriteE4f)
CUDABUILTIN(__syncthreads,          "v",            __syncthreads)
CUDABUILTIN(make_char4,             "E4cc",         make_char4)
CUDABUILTIN(make_uchar4,            "E4UcUc",       make_uchar4)
CUDABUILTIN(make_short4,            "E4ss",         make_short4)
CUDABUILTIN(make_ushort4,           "E4UsUs",       make_ushort4)
CUDABUILTIN(make_int4,              "E4ii",         make_int4)
CUDABUILTIN(make_uint4,             "E4UiUi",       make_uint4)
CUDABUILTIN(make_long4,             "E4LiLi",       make_long4)
CUDABUILTIN(make_ulong4,            "E4ULiULi",     make_ulong4)
CUDABUILTIN(make_float4,            "E4ff",         make_float4)
CUDABUILTIN(make_double4,           "E4dd",         make_double4)

RSBUILTIN(rsGetElementAt_char,      "SciC*CUiUi",   rsGetElementAt_char)
RSBUILTIN(rsGetElementAt_uchar,     "UciC*CUiUi",   rsGetElementAt_uchar)
RSBUILTIN(rsGetElementAt_short,     "SsiC*CUiUi",   rsGetElementAt_short)
RSBUILTIN(rsGetElementAt_ushort,    "UsiC*CUiUi",   rsGetElementAt_ushort)
RSBUILTIN(rsGetElementAt_int,       "SiiC*CUiUi",   rsGetElementAt_int)
RSBUILTIN(rsGetElementAt_uint,      "UiiC*CUiUi",   rsGetElementAt_uint)
RSBUILTIN(rsGetElementAt_long,      "SLiiC*CUiUi",  rsGetElementAt_long)
RSBUILTIN(rsGetElementAt_ulong,     "ULiiC*CUiUi",  rsGetElementAt_ulong)
RSBUILTIN(rsGetElementAt_float,     "fiC*CUiUi",    rsGetElementAt_float)
RSBUILTIN(rsGetElementAt_double,    "diC*CUiUi",    rsGetElementAt_double)
RSBUILTIN(rsGetElementAt_char4,     "E4SciC*CUiUi",  rsGetElementAt_char4)
RSBUILTIN(rsGetElementAt_uchar4,    "E4UciC*CUiUi",  rsGetElementAt_uchar4)
RSBUILTIN(rsGetElementAt_short4,    "E4SsiC*CUiUi",  rsGetElementAt_short4)
RSBUILTIN(rsGetElementAt_ushort4,   "E4UsiC*CUiUi",  rsGetElementAt_ushort4)
RSBUILTIN(rsGetElementAt_int4,      "E4SiiC*CUiUi",  rsGetElementAt_int4)
RSBUILTIN(rsGetElementAt_uint4,     "E4UiiC*CUiUi",  rsGetElementAt_uint4)
RSBUILTIN(rsGetElementAt_long4,     "E4SLiiC*CUiUi", rsGetElementAt_long4)
RSBUILTIN(rsGetElementAt_ulong4,    "E4ULiiC*CUiUi", rsGetElementAt_ulong4)
RSBUILTIN(rsGetElementAt_float4,    "E4fiC*CUiUi",   rsGetElementAt_float4)
RSBUILTIN(rsGetElementAt_double4,   "E4diC*CUiUi",   rsGetElementAt_double4)
RSBUILTIN(rsSetElementAt_char,      "viC*CScUiUi",   rsSetElementAt_char)
RSBUILTIN(rsSetElementAt_uchar,     "viC*CUcUiUi",   rsSetElementAt_uchar)
RSBUILTIN(rsSetElementAt_short,     "viC*CSsUiUi",   rsSetElementAt_short)
RSBUILTIN(rsSetElementAt_ushort,    "viC*CUsUiUi",   rsSetElementAt_ushort)
RSBUILTIN(rsSetElementAt_int,       "viC*CSiUiUi",   rsSetElementAt_int)
RSBUILTIN(rsSetElementAt_uint,      "viC*CUiUiUi",   rsSetElementAt_uint)
RSBUILTIN(rsSetElementAt_long,      "viC*CSLiUiUi",  rsSetElementAt_long)
RSBUILTIN(rsSetElementAt_ulong,     "viC*CULiUiUi",  rsSetElementAt_ulong)
RSBUILTIN(rsSetElementAt_float,     "viC*CfUiUi",    rsSetElementAt_float)
RSBUILTIN(rsSetElementAt_double,    "viC*CdUiUi",    rsSetElementAt_double)
RSBUILTIN(rsSetElementAt_char4,     "viC*CE4ScUiUi",  rsSetElementAt_char4)
RSBUILTIN(rsSetElementAt_uchar4,    "viC*CE4UcUiUi",  rsSetElementAt_uchar4)
RSBUILTIN(rsSetElementAt_short4,    "viC*CE4SsUiUi",  rsSetElementAt_short4)
RSBUILTIN(rsSetElementAt_ushort4,   "viC*CE4UsUiUi",  rsSetElementAt_ushort4)
RSBUILTIN(rsSetElementAt_int4,      "viC*CE4SiUiUi",  rsSetElementAt_int4)
RSBUILTIN(rsSetElementAt_uint4,     "viC*CE4UiUiUi",  rsSetElementAt_uint4)
RSBUILTIN(rsSetElementAt_long4,     "viC*CE4SLiUiUi", rsSetElementAt_long4)
RSBUILTIN(rsSetElementAt_ulong4,    "viC*CE4ULiUiUi", rsSetElementAt_ulong4)
RSBUILTIN(rsSetElementAt_float4,    "viC*CE4fUiUi",   rsSetElementAt_float4)
RSBUILTIN(rsSetElementAt_double4,   "viC*CE4dUiUi",   rsSetElementAt_double4)

VIVADOBUILTIN(getWindowAt,          "UiC*CUiUi",    getWindowAt)
VIVADOBUILTIN(setWindowAt,          "viC*CUiUiUi",  setWindowAt)
VIVADOBUILTIN(convert_char4,        "ciC*Uib",      convert_char4)
VIVADOBUILTIN(convert_uchar4,       "UciC*Uib",     convert_uchar4)
VIVADOBUILTIN(convert_short4,       "siC*Uib",      convert_short4)
VIVADOBUILTIN(convert_ushort4,      "UsiC*Uib",     convert_ushort4)
VIVADOBUILTIN(convert_int4,         "iC*Uib",       convert_int4)
VIVADOBUILTIN(convert_uint4,        "UiC*Uib",      convert_uint4)
VIVADOBUILTIN(convert_ulong4,       "ULiC*Uib",     convert_ulong4)
VIVADOBUILTIN(convert_long4,        "LiC*Uib",      convert_long4)
VIVADOBUILTIN(convert_float4,       "fC*Uib",       convert_float4)
VIVADOBUILTIN(convert_double4,      "dC*Uib",       convert_double4)

#undef HIPACCBUILTIN
#undef CUDABUILTIN
#undef OPENCLBUILTIN
#undef RSBUILTIN
#undef VIVADOBUILTIN

